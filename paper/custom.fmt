\let\Bbbk\relax
%include polycode.fmt

%if style == newcode

%format ifCodeElse(t)(e) = t
%format ifCode(e) = e
%format ifPoly(e) = " "

%format qquad =
%format ^ =
%format ^^ = " "
%format ^^^ = "^"
%format com = "--"
%format Lub(a) = "undefined"
%format Cup(a) = "undefined"
%format setundef(a) = "(undefined::forall a. Set a)"
%format (hat (a)) = a "__hat"
%format untyped(a) = "(undefined :: forall a. a)"
%format unused(a) = "_"
%format named(dom)(d) = dom
%format nameenv(dom)(env) = "Name :-> " dom
%format needd(d) = "Pow (D (ByNeed T))"
%format needenv(env) = "Pow (Name :-> D (ByNeed T))"
%format needheap(heap) = "Pow (Heap (ByNeed T))"

%else

%format ifCodeElse(t)(e) = e
%format ifCode(e) = " "
%format ifPoly(e) = e

%format qquad = "\qquad"
%format ^ = " "
%format ^^ = "\;"
%format at(a)(b) = a "_{\{" b "\}}"

%subst conid a = "\conid{" a "}"
%subst varid a = "\varid{" a "}"
%subst keyword a = "\keyword{" a "}"
%subst dummy = "\wild"

%format τ = "\varcolor{\tau}"
%format τ'
%format τ1
%format τ2
%format ρ = "\varcolor{\rho}"
%format ρ1
%format ρ2
%format ρ3
%format ρ4
%format ρi = "\varcolor{\rho}_i"
%format ρi'
%format π = "\varcolor{\pi}"
%format σ = "\varcolor{\sigma}"
%format σ1
%format σ2
%format φ = "\varcolor{\varphi}"
%format φ1
%format φ2
%format μ = "\varcolor{\mu}"
%format μ1
%format μ2
%format μ3
%format μ4
%format μi = "\varcolor{\mu}_i"
%format μ'
%format μ1'
%format μ2'
%format μ3'
%format μ4'
%format μi'
%format α = "\varcolor{\alpha}"
%format αdot = "\dot{\varcolor{\alpha}}"
%format αup = "\varcolor{\alpha}^{*}"
%format αinf = "\varcolor{\alpha}^{\infty}"
%format αD = "\varcolor{\alpha_\Domain{}}"
%format αT = "\varcolor{\alpha_\Traces{}}"
%format αE = "\varcolor{\alpha_\Environments}"
%format αS = "\varcolor{\alpha_\mathcal{S}}"
%format ι = "\varcolor{\iota}"
%format β = "\varcolor{\beta}"
%format βinf = "\varcolor{\beta}^{\infty}"
%format βT = "\varcolor{\beta_\Traces{}}"
%format βE = "\varcolor{\beta_\Environments}"
%format γ = "\varcolor{\gamma}"
%format γinf = "\varcolor{\gamma}^{\infty}"
%format γdot = "\dot{\varcolor{\gamma}}"
%format γD = "\varcolor{\gamma_\Domain{}}"
%format γT = "\varcolor{\gamma_\Traces{}}"
%format γE = "\varcolor{\gamma_\Environments}"
%format γS = "\varcolor{\gamma_\mathcal{S}}"
%format sss = "\varid{S}"
%format θ = "\varcolor{\theta}"
%format θ1
%format θ2
%format ω = "\varcolor{\omega}"
%format Σ = "\concolor{\Sigma}"
%format :-> = "\hspace{-0.15em}\rightharpoonup\hspace{-0.19em}"
%format :->: = "\mathbin{:\rightarrow:}"
%format ∈ = "\in"
%format emp = "\varcolor{\epsilon}"
%format ! = "\mathop{!}"
%format DName = "\conid{D}_{\mathbf{na}}"
%format eval(a)(b) = "\mathcal{S}\denot{" a "}_{" b "}"
%format evalC(a)(b) = "\mathcal{S}_{\mathcal{C}}\denot{" a "}_{" b "}"
%format eval3(d)(a)(b) = "\mathcal{S}_{" d "}\denot{" a "}_{" b "}"
%format (ext rho (x) (d)) = rho "[" x "\mapsto" d "]"
%format (exts rho (xs) (ds)) = rho "[\many{" xs "\mapsto" ds "}]"
%format << = "\pcirc"
%format emptyP = "\varcolor{\varnothing}"
%format ell = "\varcolor{\ell}"
%format ells = "\varcolor{\many{\ell}}"
%format evalP(a)(b) = "\mathcal{S}_{\scriptscriptstyle\mathsf{P}}\denot{" a "}_{" b "}"
%format ghci = "\lambda\!\!"
%format <$> = "\mathbin{<\mspace{-6mu}\$\mspace{-6mu}>}"
%format <|> = "\mathbin{<\mspace{-6mu}|\mspace{-6mu}>}"
%format com = "\text{-}\text{-}"
%format pow(a) = "\pow{" a "}"
%format ~> = "\progressto"
%format ==> = "\Longrightarrow"
%format <==> = "\Longleftrightarrow"
%format <. = "\lessdot"
%format `subseteqdot` = "\mathbin{\dot{\subseteq}}"
%format `oplus` = "\oplus"
%format \\ = "\setminus"
%format many(a) = "\many{" a "}"
%format named(dom) d = "{" dom " \mathbin{\vdash_{\Domain{}}^{\mathsf{na}}} " d "}"
%format nameenv(dom)(env) = "{" dom " \mathbin{\vdash_{\Environments}^{\mathsf{na}}} " env "}"
%format needd(d) = "{\mathop{\vdash_{\Domain{}}^{\mathsf{ne}}} " d "}"
%format needenv(env) = "{\mathop{\vdash_{\Environments}^{\mathsf{ne}}} " env "}"
%format needheap(heap) = "{\mathop{\vdash_{\Heaps}^{\mathsf{ne}}} " heap "}"
%format Traces = "\Traces"
%format Collecting = "\mathbb{C}"

%format bottom = "\bot"
%format d1
%format d2
%format e'
%format e1
%format e2
%format e3
%format e4
%format er = "\varcolor{e}_r"
%format ei = "\varcolor{e}_i"
%format ai = "\varcolor{a}_i"
%format a1
%format a2
%format f1
%format f2
%format v1
%format v2
%format c1
%format c2
%format us1
%format us2
%format ev1
%format ev2
%format App1
%format App2
%format Case1
%format Case2
%format Let0
%format Let1
%format trD = "\tr_Δ"
%format ℕ_ω = "ℕ_ω"
%format Sn = "\concolor{S}^n"
%%format xs = "\overline{\varid{x}}"
%%format ds = "\overline{\varid{d}}"
%%format alts = "\overline{\varid{alt}}"

%format UD = "\concolor{\widehat{D}}"
%format UT = "\concolor{\widehat{T}}"
%format UValue = "\concolor{\widehat{Value}}"
%format U0 = "\concolor{U_0}"
%format U1 = "\concolor{U_1}"
%format Uω = "\concolor{U_\omega}"

%format CD = "\concolor{\widehat{D}}"
%format CT = "\concolor{\widehat{T}}"
%format CValue = "\concolor{\widehat{Value}}"

%format Later = "\later\!"
%format highlight(a) = "\highlight{" a "}"
%format times = "\times"
%format := = "\triangleq"
%format αHeap(h) = "α_\Heaps(" h ")"
%format αEnv(e) = "α_\Environments(" e ")"
%format αState(s) = "α_\States(" s ")"
%format αSTraces(t) = "α_{\STraces}(" t ")"
%format tr = "\varcolor{\tr}"
%format tr' = "\varcolor{\tr'}"
%format trm = "\varcolor{\tr_m}"
%format tm = "\varcolor{\tm}"
%format tm' = "\varcolor{\tm'}"
%format tmm = "\varcolor{\tm_m}"
%format tl = "\varcolor{\tau^{\later}}"
%format tl2 = "\varcolor{\tau^{\later}_2}"
%format κ = "\kappa"
%format σ_n = "\sigma_n"
%format σ_m = "\sigma_m"
%format a_yi = "\varid{a}_{\varid{y},i}"
%format lktrace = "(σ_{i+1})_{i∈\overline{n-1}}"
%format (idiom(a)) = "\idiom{" a "}"
%format :<->: = "\rightleftharpoons"
%format (set(a)) = "\{" a "\}"
%format (setundef(a)) = "\{" a "\}"
%format untyped(a) = a
%format unused(a) = a
%format (Cup(a)) = "\bigcup\{" a "\}"
%format (Lub(a)) = "\Lub\{" a "\}"
%format powMap(f) = "{" f "}^{*}"
%format AT = "\varcolor{\widehat{T}}"
%format AV = "\varcolor{\widehat{V}}"
%format aτ = "\varcolor{\widehat{\tau}}"
%format av = "\varcolor{\widehat{v}}"
%format ADict = "\widehat{\varid{Dict}}"
%format (hat(a)) = "\widehat{" a "}"
%format (dot(a)) = "\dot{" a "}"

%%format ~ = "\,\sim\,"
%%format bang = "!"
%%format family = "\keyword{family}"
%%format pattern = "\keyword{pattern}"
%%format COMPLETE = "\keyword{complete}"
%%format RULES = "\keyword{RULES}"
%%format NOINLINE = "\keyword{noinline}"
%%format /~ = "\not\sim"
%%format <$ = "\mathop{\raisebox{0.025em}{$<$}\hspace{-0.16em}{\$}}"
%%format <$$ = "\mathop{\raisebox{0.025em}{$<$}\hspace{-0.16em}{\$}\hspace{-0.18em}{\$}}"
%%format <*> = "\mathop{{\langle}{*}{\rangle}}"
%%format >=> = "\mathrel{{>}\hspace{-0.32em}{=}\hspace{-0.32em}{>}}"
%%format >>  = "\mathrel{{>}\hspace{-0.4em}{>}}"
%%format >>> = "\mathrel{{>}\hspace{-0.4em}{>}\hspace{-0.4em}{>}}"
%%format |> = "\triangleright"
%%format |-> = "\mapsto"

%else
%endif

%if False
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% forall.fmt
%
% *EXPERIMENTAL*
% Semi-automatic formatting of the . as either function
% composition (normally) or a period (when used after a
% forall).
%
% Permission is granted to include this file (or parts of this file)
% literally into other documents, regardless of the conditions or
% license applying to these documents.
%
% Andres Loeh, November 2005, ver 1.1
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%endif
%if not lhs2tex_forall_fmt_read
%let lhs2tex_forall_fmt_read = True
%include lhs2TeX.fmt
%
%if style /= newcode
%
% First, let's redefine the forall, and the dot.
%
%format forall    = forall_ "\hsforall "
%format exists    = exists_ "\hsexists "
%format .         = "\hsdot{" `comp_` "}{" period_ "}"
%format `comp_`   = "\circ "
%format period_   = ".\,"
%format forall_   = "\keyword{$\forall$}\!\! "
%format exists_   = "\keyword{$\exists$}\!\! "
%
% This is made in such a way that after a forall, the next
% dot will be printed as a period, otherwise the formatting
% of `comp_` is used. By redefining `comp_`, as suitable
% composition operator can be chosen. Similarly, period_
% is used for the period.
%
\ReadOnlyOnce{forall.fmt}%
\makeatletter

% The HaskellResetHook is a list to which things can
% be added that reset the Haskell state to the beginning.
% This is to recover from states where the hacked intelligence
% is not sufficient.

\let\HaskellResetHook\empty
\newcommand*{\AtHaskellReset}[1]{%
  \g@@addto@@macro\HaskellResetHook{#1}}
\newcommand*{\HaskellReset}{\HaskellResetHook}

\global\let\hsforallread\empty
\global\let\hsexistsread\empty

\newcommand\hsforall{\global\let\hsdot=\hsperiodonce}
\newcommand\hsexists{\global\let\hsdot=\hsperiodonce}
\newcommand*\hsperiodonce[2]{#2\global\let\hsdot=\hscompose}
\newcommand*\hscompose[2]{#1}

\AtHaskellReset{\global\let\hsdot=\hscompose}

% In the beginning, we should reset Haskell once.
\HaskellReset

\makeatother
\EndFmtInput
%endif
%endif
