\let\Bbbk\relax
%include polycode.fmt

%if style == newcode

%format qquad =
%format ^ =
%format ^^ = " "
%format com = "--"

%else

%format qquad = "\qquad"
%format ^ = " "
%format ^^ = "\;"

%subst conid a = "\conid{" a "}"
%subst varid a = "\varid{" a "}"
%subst keyword a = "\keyword{" a "}"
%subst dummy = "\wild"

%format τ = "\varid{\ensuremath{\tau}}"
%format τ' = "\varid{\ensuremath{\tau'}}"
%format ρ = "\varid{\ensuremath{\rho}}"
%format φ = "\varid{\ensuremath{\varphi}}"
%format φ1 = "\varid{\ensuremath{\varphi_1}}"
%format φ2 = "\varid{\ensuremath{\varphi_2}}"
%format μ = "\varid{\ensuremath{\mu}}"
%format α = "\varid{\ensuremath{\alpha}}"
%format θ = "\varid{\ensuremath{\theta}}"
%format θ1 = "\varid{\ensuremath{\theta_1}}"
%format θ2 = "\varid{\ensuremath{\theta_2}}"
%format :-> = "\hspace{-0.15em}\rightharpoonup\hspace{-0.19em}"
%format :->: = "\mathbin{:\rightarrow:}"
%format :->: = ":\rightarrow:"
%format ∈ = "\in"
%format emp = "\varid{\ensuremath{\epsilon}}"
%format ! = "\mathop{!}"
%format eval(a)(b) = "\mathcal{S}\denot{" a "}_{" b "}"
%format ext(rho)(x)(d) = rho "[" x "\mapsto" d "]"
%format exts(rho)(xs)(ds) = rho "[\many{" xs "\mapsto" ds "}]"
%format emptyP = "\varid{\ensuremath{\varnothing}}"
%format ell = "\varid{\ensuremath{\ell}}"
%format ells = "\varid{\ensuremath{\many{\ell}}}"
%format evalP(a)(b) = "\mathcal{S}_{\scriptscriptstyle\mathsf{P}}\denot{" a "}_{" b "}"
%format ghci = "\lambda\!\!"
%format <$> = "\mathbin{<\mspace{-6mu}\$\mspace{-6mu}>}"
%format <|> = "\mathbin{<\mspace{-6mu}|\mspace{-6mu}>}"
%format com = "\text{-}\text{-}"

%format bottom = "\bot"
%format d1
%format d2
%format e1
%format e2
%format er = "\varid{\ensuremath{e_r}}"
%format v1
%format v2
%format us1
%format us2
%format App1
%format App2
%format Case1
%format Case2
%format Let0
%format Let1
%format VarP = Var
%format LamP = Lam
%format AppP = App
%format DP = D
%format ValueP = Value
%format StuckP = Stuck
%format LitP = Lit
%format FunP = Fun
%format trD = "\tr_Δ"
%format retStuckP = retStuck
%format retZeroP = retZero
%format retSuccP = retSucc
%format retPredP = retPred
%format ifZeroP = ifZero
%format retFunP = retFun
%format applyP = apply
%%format xs = "\overline{\varid{x}}"
%%format ds = "\overline{\varid{d}}"
%%format alts = "\overline{\varid{alt}}"

%format UD = "\conid{\ensuremath{\widehat{D}}}"
%format UT = "\conid{\ensuremath{\widehat{T}}}"
%format UValue = "\conid{\ensuremath{\widehat{Value}}}"
%format U0 = "\conid{$U_0$}"
%format U1 = "\conid{$U_1$}"
%format Uω = "\conid{$U_\omega$}"

%format CD = "\conid{\ensuremath{\widehat{D}}}"
%format CT = "\conid{\ensuremath{\widehat{T}}}"
%format CValue = "\conid{\ensuremath{\widehat{Value}}}"

%format Later = "\later\!"
%format times = "\times"

%%format ~ = "\,\sim\,"
%%format bang = "!"
%%format family = "\keyword{family}"
%%format pattern = "\keyword{pattern}"
%%format COMPLETE = "\keyword{complete}"
%%format RULES = "\keyword{RULES}"
%%format NOINLINE = "\keyword{noinline}"
%%format /~ = "\not\sim"
%%format <$ = "\mathop{\raisebox{0.025em}{$<$}\hspace{-0.16em}{\$}}"
%%format <$$ = "\mathop{\raisebox{0.025em}{$<$}\hspace{-0.16em}{\$}\hspace{-0.18em}{\$}}"
%%format <*> = "\mathop{{\langle}{*}{\rangle}}"
%%format >=> = "\mathrel{{>}\hspace{-0.32em}{=}\hspace{-0.32em}{>}}"
%%format >>  = "\mathrel{{>}\hspace{-0.4em}{>}}"
%%format >>> = "\mathrel{{>}\hspace{-0.4em}{>}\hspace{-0.4em}{>}}"
%%format |> = "\triangleright"
%%format |-> = "\mapsto"

%else
%endif

%if False
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% forall.fmt
%
% *EXPERIMENTAL*
% Semi-automatic formatting of the . as either function
% composition (normally) or a period (when used after a
% forall).
%
% Permission is granted to include this file (or parts of this file)
% literally into other documents, regardless of the conditions or
% license applying to these documents.
%
% Andres Loeh, November 2005, ver 1.1
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%endif
%if not lhs2tex_forall_fmt_read
%let lhs2tex_forall_fmt_read = True
%include lhs2TeX.fmt
%
%if style /= newcode
%
% First, let's redefine the forall, and the dot.
%
%format forall    = forall_ "\hsforall "
%format exists    = exists_ "\hsexists "
%format .         = "\hsdot{" `comp_` "}{" period_ "}"
%format `comp_`   = "\circ "
%format period_   = ".\,"
%format forall_   = "\keyword{$\forall$}\!\! "
%format exists_   = "\keyword{$\exists$}\!\! "
%
% This is made in such a way that after a forall, the next
% dot will be printed as a period, otherwise the formatting
% of `comp_` is used. By redefining `comp_`, as suitable
% composition operator can be chosen. Similarly, period_
% is used for the period.
%
\ReadOnlyOnce{forall.fmt}%
\makeatletter

% The HaskellResetHook is a list to which things can
% be added that reset the Haskell state to the beginning.
% This is to recover from states where the hacked intelligence
% is not sufficient.

\let\HaskellResetHook\empty
\newcommand*{\AtHaskellReset}[1]{%
  \g@@addto@@macro\HaskellResetHook{#1}}
\newcommand*{\HaskellReset}{\HaskellResetHook}

\global\let\hsforallread\empty
\global\let\hsexistsread\empty

\newcommand\hsforall{\global\let\hsdot=\hsperiodonce}
\newcommand\hsexists{\global\let\hsdot=\hsperiodonce}
\newcommand*\hsperiodonce[2]{#2\global\let\hsdot=\hscompose}
\newcommand*\hscompose[2]{#1}

\AtHaskellReset{\global\let\hsdot=\hscompose}

% In the beginning, we should reset Haskell once.
\HaskellReset

\makeatother
\EndFmtInput
%endif
%endif
